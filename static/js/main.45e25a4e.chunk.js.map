{"version":3,"sources":["components/Display.js","components/NumberButton.js","components/Buttons.js","App.js","index.js"],"names":["Display","props","className","id","NumberButton","currentDisplayValue","opsList","checkForNum","num","some","op","opsObj","a","b","result","limitFullMessage","onClick","e","str","display","document","getElementById","value","textContent","innerHTML","length","charAt","setTimeout","splitTextArr","convertedArr","calculate","initResult","tempArrInput","arrInput","i","slice","concat","push","Number","toFixed","replace","isInteger","String","splice","forEach","item","nextCalcItem","nextItem","currentItem","shift","unshift","trim","split","val","loopRunTime","handleClick","number","Buttons","App","rootElement","createRoot","render"],"mappings":"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","file":"static/js/main.45e25a4e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Display.css\";\r\n\r\nconst Display = (props) => {\r\n  return (\r\n    <>\r\n      <div className=\"display-screen\" id=\"display\"></div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n","/*ps:-0 \r\nI just started working with react and this is my first real \r\nreact project so I didn't implement state or \r\nuseState in the project so just bare :')... tnx \r\n*/\r\n\r\nimport React from \"react\";\r\nimport \"./NumberButton.css\";\r\n// import Calculator from \"./Calculator\";\r\n\r\nconst NumberButton = (props) => {\r\n  // checks and returns true if the input is an operator rather than a number\r\n  const opsList = [\"+\", \"-\", \"*\", \"/\"];\r\n  const checkForNum = (num) => opsList.some((op) => op === num);\r\n\r\n  // stores the operator functions in an object\r\n  const opsObj = {\r\n    \"+\": (a, b) => a + b,\r\n    \"-\": (a, b) => a - b,\r\n    \"*\": (a, b) => a * b,\r\n    \"/\": (a, b) => a / b\r\n  };\r\n\r\n  let result = 0;\r\n\r\n  // controls what happens after the click of each button\r\n  let currentDisplayValue;\r\n  let digitLimit = 13;\r\n  let limitFullMessage = \"DIGIT LIMIT FULL\";\r\n  const handleClick = (e) => {\r\n    let display = document.getElementById(\"display\");\r\n    const value = document.getElementById(e).textContent;\r\n\r\n    if (value !== \"=\") {\r\n      if (display.innerHTML === \"Error\") {\r\n        // clears error of screen\r\n        display.innerHTML = \"\";\r\n      }\r\n      if (value === \"AC\") {\r\n        //clears the screen\r\n        display.innerHTML = \"\";\r\n      } else if (value === \"0\" && display.innerHTML === \"0\") {\r\n        if (display.innerHTML === \"\") {\r\n          return;\r\n        }\r\n      } else if (!checkForNum(value)) {\r\n        // resets the last clicked element and displays the number on screen\r\n        if (display.innerHTML.length <= digitLimit) {\r\n          display.innerHTML += value;\r\n          currentDisplayValue = display.innerHTML;\r\n        } else {\r\n          display.innerHTML = limitFullMessage;\r\n          setTimeout(() => {\r\n            display.innerHTML = currentDisplayValue;\r\n          }, 500);\r\n        }\r\n      } else if (display.innerHTML === \"\" && checkForNum(value)) {\r\n        // stops the inputing of operators if the screen is empty\r\n        return;\r\n      } else {\r\n        if (display.innerHTML.length <= digitLimit) {\r\n          if (\r\n            !checkForNum(\r\n              display.innerHTML.charAt(display.innerHTML.length - 1)\r\n            ) ||\r\n            (value === \"+\" &&\r\n              !checkForNum(\r\n                display.innerHTML.charAt(display.innerHTML.length - 2)\r\n              ) &&\r\n              display.innerHTML.charAt(display.innerHTML.length - 1) !== \"/\" &&\r\n              display.innerHTML.charAt(display.innerHTML.length - 1) !== \"*\") ||\r\n            (value === \"-\" &&\r\n              !checkForNum(\r\n                display.innerHTML.charAt(display.innerHTML.length - 2)\r\n              ) &&\r\n              display.innerHTML.charAt(display.innerHTML.length - 1) !== \"/\" &&\r\n              display.innerHTML.charAt(display.innerHTML.length - 1) !== \"*\")\r\n          ) {\r\n            display.innerHTML += value;\r\n            currentDisplayValue = display.innerHTML;\r\n          }\r\n        } else {\r\n          display.innerHTML = limitFullMessage;\r\n          setTimeout(() => {\r\n            display.innerHTML = currentDisplayValue;\r\n          }, 500);\r\n        }\r\n      }\r\n    } else if (value === \"=\") {\r\n      // does the main calculation\r\n      if (display.innerHTML !== \"\") {\r\n        // does not allow the input of decimal followed by operator\r\n        if (\r\n          (display.innerHTML.charAt(0) !== \".\" &&\r\n            display.innerHTML.charAt(1) !== \"/\") ||\r\n          (display.innerHTML.charAt(0) !== \".\" &&\r\n            display.innerHTML.charAt(1) !== \"*\") ||\r\n          (display.innerHTML.charAt(0) !== \".\" &&\r\n            display.innerHTML.charAt(1) !== \"+\") ||\r\n          (display.innerHTML.charAt(0) !== \".\" &&\r\n            display.innerHTML.charAt(1) !== \"-\")\r\n        ) {\r\n          // --------------------------------- splits the input text ----------------------------- //\r\n          let splitTextArr;\r\n          const splitString = (str) => {\r\n            splitTextArr = [\"\"];\r\n            str\r\n              .trim()\r\n              .replace(/\\s/g, \"\")\r\n              .split(\"\")\r\n              .forEach((val) => {\r\n                if (\r\n                  !checkForNum(val) &&\r\n                  !checkForNum(splitTextArr[splitTextArr.length - 1])\r\n                ) {\r\n                  splitTextArr[splitTextArr.length - 1] += val;\r\n                } else {\r\n                  splitTextArr[splitTextArr.length] = val;\r\n                }\r\n              });\r\n            if (splitTextArr[0] === \"\") {\r\n              splitTextArr = splitTextArr.splice(1);\r\n            }\r\n\r\n            return splitTextArr;\r\n          };\r\n\r\n          // ---------------------- calculation function ------------------------------------ //\r\n          let convertedArr = [];\r\n          const calculate = (inputed = []) => {\r\n            let tempArrInput = inputed;\r\n            let arrInput = [];\r\n\r\n            // loops over the array to remove any recurring operators\r\n            for (let i = 0; i < tempArrInput.length; i++) {\r\n              if (arrInput[arrInput.length - 1] === tempArrInput[i]) {\r\n                tempArrInput = tempArrInput\r\n                  .slice(0, tempArrInput[i])\r\n                  .concat(tempArrInput.slice(tempArrInput[i]));\r\n              } else {\r\n                arrInput.push(tempArrInput[i]);\r\n              }\r\n            }\r\n\r\n            convertedArr = [];\r\n            if (arrInput.length <= 0) {\r\n              return \"No Input\";\r\n            } else if (arrInput.length === 1) {\r\n              // checks if result is a float or an integer\r\n              if (\r\n                Number(arrInput[0]) === arrInput[0] &&\r\n                arrInput[0] % 1 !== 0\r\n              ) {\r\n                // assigns the result to a variabe named result\r\n                result = arrInput[0].toFixed(4).replace(/0+$/, \"\");\r\n                return result;\r\n              } else if (Number.isInteger(arrInput[0])) {\r\n                result = arrInput[0];\r\n                return String(result).replace(/0+$/, \"\");\r\n              }\r\n              return result;\r\n            }\r\n\r\n            if (checkForNum(arrInput[0])) {\r\n              arrInput = arrInput.splice(1);\r\n            }\r\n\r\n            arrInput.forEach((item) => {\r\n              if (checkForNum(item)) {\r\n                convertedArr.push(item);\r\n              } else {\r\n                convertedArr.push(Number(item));\r\n              }\r\n            });\r\n\r\n            let initResult;\r\n            const currentItem = convertedArr[0];\r\n            let nextCalcItem;\r\n            let nextItem;\r\n            if (convertedArr.length >= 3) {\r\n              nextItem = convertedArr[1];\r\n              nextCalcItem = convertedArr[2];\r\n            }\r\n            initResult = opsObj[nextItem](currentItem, nextCalcItem);\r\n            convertedArr.shift();\r\n            convertedArr.shift();\r\n            convertedArr.shift();\r\n            convertedArr.unshift(initResult);\r\n            initResult = 0;\r\n          };\r\n\r\n          calculate(splitString(display.innerHTML));\r\n          let loopRunTime = convertedArr.length;\r\n\r\n          for (let i = 0; i < loopRunTime; i++) {\r\n            calculate(convertedArr);\r\n          }\r\n          display.innerHTML = result;\r\n        } else {\r\n          display.innerHTML = \"Error\";\r\n        }\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <button\r\n        className={props.className ? props.className : \"num-btn\"}\r\n        id={props.id}\r\n        onClick={() => handleClick(props.id)}\r\n      >\r\n        {props.number}\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NumberButton;\r\n","import React from \"react\";\r\nimport NumberButton from \"./NumberButton\";\r\nimport \"./Buttons.css\";\r\n\r\nconst Buttons = (props) => {\r\n  return (\r\n    <div className=\"buttons\">\r\n      <NumberButton id=\"clear\" className=\"num-btn clear\" number=\"AC\" />\r\n      <NumberButton id=\"add\" number=\"+\" />\r\n      <NumberButton id=\"multiply\" number=\"*\" />\r\n      <NumberButton id=\"seven\" number=\"7\" />\r\n      <NumberButton id=\"eight\" number=\"8\" />\r\n      <NumberButton id=\"nine\" number=\"9\" />\r\n      <NumberButton id=\"subtract\" number=\"-\" />\r\n      <NumberButton id=\"four\" number=\"4\" />\r\n      <NumberButton id=\"five\" number=\"5\" />\r\n      <NumberButton id=\"six\" number=\"6\" />\r\n      <NumberButton id=\"divide\" number=\"/\" />\r\n      <NumberButton id=\"one\" number=\"1\" />\r\n      <NumberButton id=\"two\" number=\"2\" />\r\n      <NumberButton id=\"three\" number=\"3\" />\r\n      <NumberButton id=\"equals\" number=\"=\" className=\"num-btn equals\" />\r\n      <NumberButton id=\"zero\" number=\"0\" className=\"num-btn zero\" />\r\n      <NumberButton id=\"decimal\" number=\".\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","import \"./App.css\";\nimport Display from \"./components/Display\";\nimport Buttons from \"./components/Buttons\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Display />\n      <Buttons />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}